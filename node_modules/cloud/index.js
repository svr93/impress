
/**
 * Module dependencies.
 */

var spawn = require('child_process').spawn;
var escape = require('shell-escape');
var program = require('commander');
var assert = require('assert');
var Batch = require('batch');
var exec = require('co-exec');
var fmt = require('printf');
var co = require('co');

/**
 * Expose `Cloud`.
 */

module.exports = Cloud;

/**
 * Initialize a new Cloud.
 *
 * @api public
 */

function Cloud() {
  this.tasks = {};
  this.hosts = {};
}

/**
 * Output the tasks to stdout.
 *
 * @api public
 */

Cloud.prototype.outputTasks = function(){
  var tasks = this.tasks;
  console.log();

  for (var name in tasks) {
    var task = tasks[name];
    if (task.private) continue;
    console.log(fmt('  %18s — %s', task.name, task.desc));
  }

  console.log();
};

/**
 * Output the hosts defined to stdout.
 *
 * @api public
 */

Cloud.prototype.outputHosts = function(){
  var hosts = this.hosts;
  console.log();

  for (var name in hosts) {
    var host = hosts[name];
    console.log(fmt('  %15s — %s', host.name, host.address));
  }

  console.log();
};

/**
 * Define task `name` with `desc` and `fn`.
 *
 * @param {String} name
 * @param {String} desc
 * @param {GeneratorFunction|Array} fn or tasks
 * @param {GeneratorFunction} [fn]
 * @api public
 */

Cloud.prototype.task = function(name, desc, fn){
  var self = this;
  var deps = [];

  if (1 == arguments.length) {
    return function(done){
      self.run(name, done);
    }
  }

  if (Array.isArray(fn)) {
    deps = fn;
    fn = arguments[3];
  }

  var priv = '-' == desc[0];
  if (priv) desc = desc.slice(1);

  this.tasks[name] = {
    deps: deps,
    name: name,
    desc: desc,
    private: priv,
    fn: fn
  };
};

/**
 * Define host `name` with `opts`:
 *
 *  - `key` path to private key
 *  - `user` ssh username
 *  - `address` host address
 *
 * A `Host` object is returned which may
 * then be used to execute remote commands.
 *
 * @param {String} name
 * @param {Object} opts
 * @return {Host}
 * @api public
 */

Cloud.prototype.host = function(name, opts){
  return this.hosts[name] = new Host(name, opts, this);
};

/**
 * Parse `argv`.
 *
 * @param {Array} argv
 * @param {Function} [fn]
 * @api public
 */

Cloud.prototype.parse = function(argv, fn){
  fn = fn || function(){};
  var ctx = this.ctx = new Context;
  var self = this;

  program
  .usage('<task ...>')
  .option('-D, --dry-run', 'perform a dry run')
  .option('-t, --tasks', 'output list of available tasks')
  .option('-H, --hosts', 'output list of available hosts')
  .option('-v, --verbose', 'output verbose log information')
  .option('-s, --set <var>', 'define a variable "-s foo=bar"')
  .option('-c, --concurrency <n>', 'task execution concurrency [1]', '1')

  program.on('set', function(set){
    set = set.split('=');
    ctx[set[0]] = set[1] || true;
  });

  program.parse(normalize(argv));

  if (program.tasks) return this.outputTasks();

  if (program.hosts) return this.outputHosts();

  if (!program.args.length) return this.outputTasks();

  if (!program.verbose) this.log = function(){};

  if (program.dryRun) this.dry = true;

  var n = ~~program.concurrency;
  this.runTasks(program.args, n, fn);
};

/**
 * Run `tasks` and invoke `fn(err)`.
 *
 * @param {Array} tasks
 * @param {Number} concurrency
 * @param {Function} fn
 * @api private
 */

Cloud.prototype.runTasks = function(tasks, n, fn){
  var self = this;
  var batch = new Batch;

  tasks.forEach(function(task){
    batch.push(function(done){
      self.run(task, done);
    });
  });

  batch.concurrency(n);

  batch.end(fn);
};

/**
 * Run the given task `name`.
 *
 * @param {String} name
 * @param {Function} fn
 * @api public
 */

Cloud.prototype.run = function(name, fn){
  var task = this.tasks[name];
  var ctx = this.ctx;

  assert(task, 'task "' + name + '" is not defined');

  if (task.deps.length) {
    this.runTasks(task.deps, 1, function(err){
      if (err) return fn(err);
      if (!task.fn) return fn();
      co(task.fn).call(ctx, fn);
    });
    return;
  }

  co(task.fn).call(ctx, fn);
};

/**
 * Log to stdout.
 *
 * @param {String} format
 * @param {Mixed} ...
 * @api private
 */

Cloud.prototype.log = function(){
  console.log(fmt.apply(this, arguments));
};

/**
 * Host `name` with `opts`.
 *
 * @param {String} name
 * @param {Object} opts
 * @api private
 */

function Host(name, opts, cloud) {
  opts = opts || {};

  assert(name, 'host name required');
  assert(opts.key, 'host .key required');
  assert(opts.user, 'host .user required');
  assert(opts.address, 'host .address required');

  this.name = name;
  this.user = opts.user;
  this.cloud = cloud;
  this.address = opts.address;
  this.private = opts.private;
  this.key = opts.key.replace('~', process.env.HOME);
}

/**
 * Return a private host with `name`.
 *
 * @param {String} name
 * @return {Host}
 * @api public
 */

Host.prototype.host = function(name){
  return new Host(this.name, {
    key: this.key,
    private: name,
    user: this.user,
    address: this.address
  }, this.cloud);
};

/**
 * Return SSH command string.
 *
 * @return {String}
 * @api private
 */

Host.prototype.ssh = function(){
  return 'ssh -o StrictHostKeyChecking=no -i ' + this.key + ' ' + this.user + '@' + this.address + ' ';
};

/**
 * Run shell `script` on the host or
 * pass two arguments to execute on
 * a private host in the network.
 *
 * @param {String} file
 * @param {String} [host]
 * @return {String} result
 * @api public
 */

Host.prototype.run = function *(script, host){
  // TODO: always prefix when host is used, remove .private
  var cmd = this.ssh();
  host = host || this.private;

  if (host) {
    cmd += escape(['ssh -o StrictHostKeyChecking=no -T ' + host + ' /bin/sh']) + ' < ' + script;
  } else {
    cmd += '/bin/sh < ' + escape([script]);
  }

  if (host) {
    this.cloud.log('  \033[36m%16s:%s\033[0m — run %s', this.name, host, script);
  } else {
    this.cloud.log('  \033[36m%16s\033[0m — run %s', this.name, script);
  }

  if (!this.cloud.dry) var ret = (yield this._exec(cmd)).trim();
  if (!this.cloud.dry) this.stdio(ret, host);
  return ret;
};

/**
 * Streaming variant of `.exec()`.
 *
 * Example:
 *
 *    var d;
 *    var stream = data.stream('sudo tail -f /var/log/nginx/*.log');
 *    stream.stdout.setEncoding('utf8');
 *    while (d = yield read(stream.stdout)) console.log(d);
 *
 * @param {String|Array} command
 * @param {String} [host]
 * @return {Stream} stream
 * @api public
 */

Host.prototype.stream = function(command, host){
  var cmd = this.ssh()
  host = host || this.private;

  if (Array.isArray(command)) {
    command = command.join(' && ');
  }

  if (host) {
    this.cloud.log('  \033[36m%16s:%s\033[0m — stream `%s`', this.name, host, command);
  } else {
    this.cloud.log('  \033[36m%16s\033[0m — stream `%s`', this.name, command);
  }

  if (host) {
    cmd += escape(['ssh -o StrictHostKeyChecking=no -T ' + host + ' ' + escape([command])]);
  } else {
    cmd += escape([command]);
  }

  return spawn('sh', ['-c', cmd]);
};

/**
 * Execute `command` on the host or
 * pass two arguments to execute
 * a command on a private host
 * in the network.
 *
 * @param {String|Array} command
 * @param {String} [host]
 * @return {String} result
 * @api public
 */

Host.prototype.exec = function *(command, host){
  var cmd = this.ssh()
  host = host || this.private;

  if (Array.isArray(command)) {
    command = command.join(' && ');
  }

  if (host) {
    this.cloud.log('  \033[36m%16s:%s\033[0m — exec `%s`', this.name, host, command);
  } else {
    this.cloud.log('  \033[36m%16s\033[0m — exec `%s`', this.name, command);
  }

  if (host) {
    cmd += escape(['ssh -o StrictHostKeyChecking=no -T ' + host + ' ' + escape([command])]);
  } else {
    cmd += escape([command]);
  }

  if (!this.cloud.dry) var ret = (yield this._exec(cmd)).trim();
  if (!this.cloud.dry) this.stdio(ret, host);
  return ret;
};

/**
 * Execute `cmd`.
 *
 * @param {String} cmd
 * @return {Function}
 * @api private
 */

Host.prototype._exec = function(cmd){
  return exec(cmd, {
    maxBuffer: 1024 * 1024
  });
};

/**
 * Log stdio `str`.
 *
 * @param {String} str
 * @api public
 */

Host.prototype.stdio = function(str, host){
  if (!str) return;
  var lines = str.split('\n');
  for (var i = 0; i < lines.length; i++) {
    if (host) {
      this.cloud.log('  \033[36m%16s:%s\033[0m — \033[90m%s\033[0m', this.name, host, lines[i]);
    } else {
      this.cloud.log('  \033[36m%16s\033[0m — \033[90m%s\033[0m', this.name, lines[i]);
    }
  }
};

/**
 * Normalize `args`:
 *
 * - transform `foo=bar` to `-s foo=bar`.
 *
 * @param {Array} args
 * @return {Array}
 * @api private
 */

function normalize(args) {
  var ret = [];

  for (var i = 0; i < args.length; i++) {
    var arg = args[i];
    var last = args[i - 1];
    var assign = ~arg.indexOf('=');

    if (last != null && assign && '-' != last[0]) {
      ret.push('-s');
    }

    ret.push(arg);
  }

  return ret;
}

/**
 * Initialize a new context with `obj`.
 *
 * @param {Object} obj
 * @api private
 */

function Context(obj) {
  obj = obj || {};
  for (var k in obj) this[k] = obj[k];
}
