{
  "name": "health",
  "description": "Resource status monitoring library.",
  "keywords": [
    "health",
    "status",
    "monitor"
  ],
  "version": "0.2.3",
  "homepage": "http://github.com/cliffano/health",
  "author": {
    "name": "Cliffano Subagio",
    "email": "blah@cliffano.com",
    "url": "http://blog.cliffano.com"
  },
  "contributors": [
    {
      "name": "All contributors",
      "url": "https://github.com/cliffano/health/graphs/contributors"
    }
  ],
  "main": "./lib/health",
  "bin": {
    "health": "./bin/health"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/cliffano/health.git"
  },
  "bugs": {
    "url": "http://github.com/cliffano/health/issues"
  },
  "directories": {
    "bin": "./bin",
    "lib": "./lib",
    "test": "./test"
  },
  "dependencies": {
    "async": "~0.2.9",
    "bagofcli": "~0.0.5",
    "bagofrequest": "~0.0.5",
    "colors": "~0.6.1",
    "fs.extra": "~1.2.1",
    "i18n": "~0.4.1",
    "lodash": "~1.3.1",
    "memory-cache": "~0.0.5",
    "mongodb": "~1.3.18",
    "jazz": "~0.0.18",
    "validator": "~1.4.0"
  },
  "devDependencies": {
    "buster": "~0.6.12",
    "shelljs": "~0.1.4"
  },
  "scripts": {},
  "engines": {
    "node": ">= 0.4.0"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/cliffano/health/raw/master/LICENSE"
    }
  ],
  "readme": "Health [![Build Status](https://secure.travis-ci.org/cliffano/health.png?branch=master)](http://travis-ci.org/cliffano/health) [![Dependencies Status](https://david-dm.org/cliffano/health.png)](http://david-dm.org/cliffano/health) [![Published Version](https://badge.fury.io/js/health.png)](http://badge.fury.io/js/health)\n-----------\n<img align=\"right\" src=\"https://raw.github.com/cliffano/health/master/avatar.jpg\" alt=\"Avatar\"/>\n\nHealth is a resource status monitoring library.\n\nThis is handy when you want to monitor the status of multiple resources using a simple configuration file. For example, if your application requires a web service and a MongoDB database to be available, Health module can monitor those resources and return status ok/fail against each resource along with the response time.\n\nIt also supports result caching via ttl attribe of each resource, which is handy when you want to monitor multiple resources at a different interval or to reduce the load on certain resources.\n\nInstallation\n------------\n\n    npm install -g health \n\nUsage\n-----\n\n    // use default formatter\n    var health = new (require('health'))(\n      setup: [ { name: 'google', uri: 'http://google.com' } ]\n    );\n\n    // use built-in formatter (html, text, or xml)\n    var health = new (require('health'))(\n      setup: [ { name: 'google', uri: 'http://google.com' } ],\n      formatter: 'html'\n    );\n\n    // use custom formatter function\n    var health = new (require('health'))(\n      setup: [ { name: 'google', uri: 'http://google.com' } ],\n      formatter: function (results) {\n        return results.join('|');\n      }\n    );\n\n    // check resources\n    health.check(function (err, result) {\n    });\n\nFrom command-line:\n\n    health -f html -s health.json check\n\nConfiguration\n-------------\n\nHealth setup is just a simple JSON:\n\n    [\n      { \"name\": \"Google\", \"uri\", \"http://google.com\", \"statusCodes\": [ 200 ] },\n      { \"name\": \"GMail\", \"uri\", \"https://mail.google.com\", \"timeout\": \"1000\" },\n      { \"name\": \"MongoDB\", \"uri\": \"mongodb://somehost:27017\", \"timeout\": 200, \"ttl\": 30000 },\n      { \"name\": \"Temp\", \"uri\": \"file:///tmp\", \"mode\": \"777\", \"ttl\": 360000 }\n    ]\n\n<table>\n  <tr>\n    <th>Attribute</th>\n    <th>Type</th>\n    <th>Description</th>\n    <th>Protocol</th>\n    <th>Usage</th>\n    <th>Default</th>\n    <th>Example</th>\n  </tr>\n  <tr>\n    <td>uri</td>\n    <td>string</td>\n    <td>Resource URI to check</td>\n    <td>All</td>\n    <td>Mandatory</td>\n    <td></td>\n    <td>mongodb://somehost:27017</td>\n  </tr>\n  <tr>\n    <td>name</td>\n    <td>string</td>\n    <td>Resource name</td>\n    <td>All</td>\n    <td>Optional</td>\n    <td></td>\n    <td>someapp</td>\n  </tr>\n  <tr>\n    <td>ttl</td>\n    <td>number</td>\n    <td>Cache time to live in milliseconds</td>\n    <td>All</td>\n    <td>Optional</td>\n    <td></td>\n    <td>30000</td>\n  </tr>\n  <tr>\n    <td>lenient</td>\n    <td>boolean</td>\n    <td>Replace fail or error with warning</td>\n    <td>All</td>\n    <td>Optional</td>\n    <td>false</td>\n    <td>true, false</td>\n  </tr>\n  <tr>\n    <td>group</td>\n    <td>string</td>\n    <td>Resource group name, status is set to warning when there's at least one group member having success/warning status, group members status is set to fail/error only when none of the group members has success/warning status</td>\n    <td>All</td>\n    <td>Optional</td>\n    <td></td>\n    <td>databases, apps, datacenter1</td>\n  </tr>\n  <tr>\n    <td>timeout</td>\n    <td>number</td>\n    <td>Request/connect timeout in milliseconds</td>\n    <td>http, https, mongodb</td>\n    <td>Optional</td>\n    <td></td>\n    <td>500</td>\n  </tr>\n  <tr>\n    <td>statusCode</td>\n    <td>array</td>\n    <td>An array of acceptable response HTTP status codes</td>\n    <td>http, https</td>\n    <td>Optional</td>\n    <td></td>\n    <td>[ 200, 409 ]</td>\n  </tr>\n  <tr>\n    <td>text</td>\n    <td>array</td>\n    <td>An array of all texts that must exist in response body, any of them does not exist means status FAIL</td>\n    <td>http, https</td>\n    <td>Optional</td>\n    <td></td>\n    <td>[ 'foo', 'bar' ]</td>\n  </tr>\n  <tr>\n    <td>mode</td>\n    <td>string</td>\n    <td>3-digit file/directory mode</td>\n    <td>file</td>\n    <td>Optional</td>\n    <td></td>\n    <td>777, 644</td>\n  </tr>\n</table>\n",
  "readmeFilename": "README.md",
  "_id": "health@0.2.3",
  "dist": {
    "shasum": "6bdaf262e297fb0a36982697ddea2db0acac1636"
  },
  "_from": "health@",
  "_resolved": "https://registry.npmjs.org/health/-/health-0.2.3.tgz"
}
